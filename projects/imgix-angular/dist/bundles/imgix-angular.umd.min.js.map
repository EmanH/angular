{"version":3,"sources":["../../src/lib/imgix-config.service.ts","../../src/common/createImgixClient.ts","../../src/common/ng.ts","../../src/lib/ix-img.component.ts","../../src/lib/ix-picture.component.ts","../../src/lib/ix-source.component.ts","../../src/lib/imgix-angular.module.ts"],"names":["ImgixConfigService","InjectionToken","createImgixClient","config","client","ImgixClient","domain","includeLibraryParam","settings","libraryParam","coerceBooleanProperty","value","coerceNumericProperty","valueParsed","Number","parseFloat","isNaN","IxImgComponent","elementRef","this","_fixed","_disableVariableQuality","Object","defineProperty","prototype","_width","_height","ngAfterViewChecked","setSrcAndSrcsetAttributes","setOtherAttributes","el","nativeElement","width","setAttribute","String","height","buildIxParams","imgixParamsFromImgAttributes","assign","fixed","w","h","defaultImgixParams","imgixParams","_b","_a","attributeConfig","src","srcURL","_d","_c","srcset","srcsetURL","buildURL","path","buildSrcSet","disableVariableQuality","Injectable","Component","args","selector","template","Inject","ElementRef","Input","IxSourceComponent","setSrcsetAttribute","ImgixAngularModule","forRoot","ngModule","providers","IxPictureComponent","provide","useValue","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { IImgixParams } from './types';\n\nexport interface ImgixConfig {\n  domain: string;\n  includeLibraryParam?: boolean;\n  defaultImgixParams?: IImgixParams;\n}\n\nexport const ImgixConfigService = new InjectionToken<ImgixConfig>(\n  'ImgixConfig',\n);\n","import ImgixClient from 'imgix-core-js';\nimport { ImgixConfig } from '../lib/imgix-config.service';\nimport { IMGIX_NG_VERSION } from './constants';\n\nexport function createImgixClient(config: ImgixConfig): ImgixClient {\n  const client = new ImgixClient({\n    domain: config.domain,\n    includeLibraryParam: false,\n  });\n\n  if (!(config.includeLibraryParam === false)) {\n    (client as any).settings.libraryParam = `ng-${IMGIX_NG_VERSION}`;\n  }\n\n  return client;\n}\n","/** Coerces a data-bound value (typically a string) to a boolean. */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport function coerceNumericProperty(value: any): number | undefined {\n  if (typeof value === 'string') {\n    const valueParsed = Number.parseFloat(value);\n    if (!Number.isNaN(valueParsed)) {\n      return valueParsed;\n    }\n  } else if (typeof value === 'number' && !Number.isNaN(value)) {\n    return value;\n  }\n\n  return undefined;\n}\n","import {\n  AfterViewChecked,\n  Component,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n} from '@angular/core';\nimport ImgixClient from 'imgix-core-js';\nimport { createImgixClient } from '../common/createImgixClient';\nimport { coerceBooleanProperty, coerceNumericProperty } from '../common/ng';\nimport { ImgixConfig, ImgixConfigService } from './imgix-config.service';\nimport { IImgixParams } from './types';\n\n@Injectable()\n@Component({\n  // the [path] means that path is required\n  selector: '[ixImg][path]',\n  template: ``,\n})\nexport class IxImgComponent implements AfterViewChecked {\n  private readonly client: ImgixClient;\n\n  @Input('path') path: string;\n  @Input()\n  get fixed(): boolean {\n    return this._fixed;\n  }\n  set fixed(value: boolean) {\n    this._fixed = coerceBooleanProperty(value as any);\n  }\n  private _fixed: boolean = false;\n\n  @Input('imgixParams') imgixParams?: IImgixParams;\n\n  @Input('width')\n  get width(): number | undefined {\n    return this._width;\n  }\n  set width(_width: number | undefined) {\n    this._width = coerceNumericProperty(_width);\n  }\n  private _width: number | undefined;\n\n  @Input()\n  get height(): number | undefined {\n    return this._height;\n  }\n  set height(_height: number | undefined) {\n    this._height = coerceNumericProperty(_height);\n  }\n  private _height: number | undefined;\n\n  @Input() attributeConfig?: { src?: string; srcset?: string };\n  @Input()\n  get disableVariableQuality(): boolean {\n    return this._disableVariableQuality;\n  }\n  set disableVariableQuality(_disableVariableQuality: boolean) {\n    this._disableVariableQuality = coerceBooleanProperty(\n      _disableVariableQuality,\n    );\n  }\n  private _disableVariableQuality: boolean = false;\n\n  constructor(\n    @Inject(ImgixConfigService) private config: ImgixConfig,\n    private elementRef: ElementRef<HTMLImageElement>,\n  ) {\n    this.client = createImgixClient(this.config);\n  }\n\n  ngAfterViewChecked() {\n    this.setSrcAndSrcsetAttributes();\n    this.setOtherAttributes();\n  }\n\n  private setOtherAttributes() {\n    const el = this.elementRef.nativeElement;\n    if (this.width != null) {\n      el.setAttribute('width', String(this.width));\n    }\n    if (this.height != null) {\n      el.setAttribute('height', String(this.height));\n    }\n  }\n\n  private buildIxParams() {\n    const imgixParamsFromImgAttributes = {\n      ...(this.fixed && {\n        ...(this.width != null ? { w: this.width } : {}),\n        ...(this.height != null ? { h: this.height } : {}),\n      }),\n    };\n    return {\n      ...this.config.defaultImgixParams,\n      ...imgixParamsFromImgAttributes,\n      ...this.imgixParams,\n    };\n  }\n\n  private setSrcAndSrcsetAttributes() {\n    const el = this.elementRef.nativeElement;\n    el.setAttribute(this.attributeConfig?.src ?? 'src', this.srcURL);\n    el.setAttribute(this.attributeConfig?.srcset ?? 'srcset', this.srcsetURL);\n  }\n\n  get srcURL(): string {\n    return this.client.buildURL(this.path, this.buildIxParams());\n  }\n  get srcsetURL(): string {\n    return this.client.buildSrcSet(this.path, this.buildIxParams(), {\n      disableVariableQuality: this.disableVariableQuality,\n    });\n  }\n}\n","import { Component, Injectable } from '@angular/core';\n\n@Injectable()\n@Component({\n  selector: '[ixPicture]',\n  template: '<ng-content></ng-content>',\n})\nexport class IxPictureComponent {}\n","import {\n  AfterViewChecked,\n  Component,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n} from '@angular/core';\nimport ImgixClient from 'imgix-core-js';\nimport { createImgixClient } from '../common/createImgixClient';\nimport { coerceBooleanProperty } from '../common/ng';\nimport { ImgixConfig, ImgixConfigService } from './imgix-config.service';\nimport { IImgixParams } from './types';\n\n@Injectable()\n@Component({\n  // the [path] means that path is required\n  selector: '[ixSource][path]',\n  template: ``,\n})\nexport class IxSourceComponent implements AfterViewChecked {\n  private readonly client: ImgixClient;\n\n  @Input('path') path: string;\n  @Input() imgixParams?: IImgixParams;\n  @Input() attributeConfig?: { srcset?: string };\n  @Input()\n  get disableVariableQuality(): boolean {\n    return this._disableVariableQuality;\n  }\n  set disableVariableQuality(_disableVariableQuality: boolean) {\n    this._disableVariableQuality = coerceBooleanProperty(\n      _disableVariableQuality,\n    );\n  }\n  private _disableVariableQuality: boolean = false;\n\n  constructor(\n    @Inject(ImgixConfigService) private config: ImgixConfig,\n    private elementRef: ElementRef,\n  ) {\n    this.client = createImgixClient(config);\n  }\n\n  ngAfterViewChecked() {\n    this.setSrcsetAttribute();\n  }\n  private buildIxParams() {\n    const imgixParamsFromImgAttributes = {};\n    return {\n      ...this.config.defaultImgixParams,\n      ...imgixParamsFromImgAttributes,\n      ...this.imgixParams,\n    };\n  }\n  private setSrcsetAttribute() {\n    const el = this.elementRef.nativeElement;\n    el.setAttribute(this.attributeConfig?.srcset ?? 'srcset', this.srcsetURL);\n  }\n  get srcsetURL(): string {\n    return this.client.buildSrcSet(this.path, this.buildIxParams(), {\n      disableVariableQuality: this.disableVariableQuality,\n    });\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ImgixConfig, ImgixConfigService } from './imgix-config.service';\nimport { IxImgComponent } from './ix-img.component';\nimport { IxPictureComponent } from './ix-picture.component';\nimport { IxSourceComponent } from './ix-source.component';\n\n@NgModule({\n  declarations: [IxImgComponent, IxSourceComponent, IxPictureComponent],\n  exports: [IxImgComponent, IxSourceComponent, IxPictureComponent],\n})\nexport class ImgixAngularModule {\n  // Using config injection pattern from: https://medium.com/@michelestieven/angular-writing-configurable-modules-69e6ea23ea42\n  static forRoot(config: ImgixConfig): ModuleWithProviders<ImgixAngularModule> {\n    return {\n      ngModule: ImgixAngularModule,\n      providers: [\n        IxImgComponent,\n        IxSourceComponent,\n        IxPictureComponent,\n        { provide: ImgixConfigService, useValue: config },\n      ],\n    };\n  }\n}\n"]}
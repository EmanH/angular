{"version":3,"file":"imgix-angular.umd.js","sources":["../../src/lib/imgix-config.service.ts","../../src/common/constants.ts","../../src/common/createImgixClient.ts","../../src/common/ng.ts","../../src/lib/ix-img.component.ts","../../src/lib/ix-picture.component.ts","../../src/lib/ix-source.component.ts","../../src/lib/imgix-angular.module.ts","../../src/public-api.ts","../../src/imgix-angular.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { IImgixParams } from './types';\n\nexport interface ImgixConfig {\n  domain: string;\n  includeLibraryParam?: boolean;\n  defaultImgixParams?: IImgixParams;\n}\n\nexport const ImgixConfigService = new InjectionToken<ImgixConfig>(\n  'ImgixConfig',\n);\n","export const IMGIX_NG_VERSION: string = '1.0.0-rc.1';\n","import ImgixClient from 'imgix-core-js';\nimport { ImgixConfig } from '../lib/imgix-config.service';\nimport { IMGIX_NG_VERSION } from './constants';\n\nexport function createImgixClient(config: ImgixConfig): ImgixClient {\n  const client = new ImgixClient({\n    domain: config.domain,\n    includeLibraryParam: false,\n  });\n\n  if (!(config.includeLibraryParam === false)) {\n    (client as any).settings.libraryParam = `ng-${IMGIX_NG_VERSION}`;\n  }\n\n  return client;\n}\n","/** Coerces a data-bound value (typically a string) to a boolean. */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport function coerceNumericProperty(value: any): number | undefined {\n  if (typeof value === 'string') {\n    const valueParsed = Number.parseFloat(value);\n    if (!Number.isNaN(valueParsed)) {\n      return valueParsed;\n    }\n  } else if (typeof value === 'number' && !Number.isNaN(value)) {\n    return value;\n  }\n\n  return undefined;\n}\n","import {\n  AfterViewChecked,\n  Component,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n} from '@angular/core';\nimport ImgixClient from 'imgix-core-js';\nimport { createImgixClient } from '../common/createImgixClient';\nimport { coerceBooleanProperty, coerceNumericProperty } from '../common/ng';\nimport { ImgixConfig, ImgixConfigService } from './imgix-config.service';\nimport { IImgixParams } from './types';\n\n@Injectable()\n@Component({\n  // the [path] means that path is required\n  selector: '[ixImg][path]',\n  template: ``,\n})\nexport class IxImgComponent implements AfterViewChecked {\n  private readonly client: ImgixClient;\n\n  @Input('path') path: string;\n  @Input()\n  get fixed(): boolean {\n    return this._fixed;\n  }\n  set fixed(value: boolean) {\n    this._fixed = coerceBooleanProperty(value as any);\n  }\n  private _fixed: boolean = false;\n\n  @Input('imgixParams') imgixParams?: IImgixParams;\n\n  @Input('width')\n  get width(): number | undefined {\n    return this._width;\n  }\n  set width(_width: number | undefined) {\n    this._width = coerceNumericProperty(_width);\n  }\n  private _width: number | undefined;\n\n  @Input()\n  get height(): number | undefined {\n    return this._height;\n  }\n  set height(_height: number | undefined) {\n    this._height = coerceNumericProperty(_height);\n  }\n  private _height: number | undefined;\n\n  @Input() attributeConfig?: { src?: string; srcset?: string };\n  @Input()\n  get disableVariableQuality(): boolean {\n    return this._disableVariableQuality;\n  }\n  set disableVariableQuality(_disableVariableQuality: boolean) {\n    this._disableVariableQuality = coerceBooleanProperty(\n      _disableVariableQuality,\n    );\n  }\n  private _disableVariableQuality: boolean = false;\n\n  constructor(\n    @Inject(ImgixConfigService) private config: ImgixConfig,\n    private elementRef: ElementRef<HTMLImageElement>,\n  ) {\n    this.client = createImgixClient(this.config);\n  }\n\n  ngAfterViewChecked() {\n    this.setSrcAndSrcsetAttributes();\n    this.setOtherAttributes();\n  }\n\n  private setOtherAttributes() {\n    const el = this.elementRef.nativeElement;\n    if (this.width != null) {\n      el.setAttribute('width', String(this.width));\n    }\n    if (this.height != null) {\n      el.setAttribute('height', String(this.height));\n    }\n  }\n\n  private buildIxParams() {\n    const imgixParamsFromImgAttributes = {\n      ...(this.fixed && {\n        ...(this.width != null ? { w: this.width } : {}),\n        ...(this.height != null ? { h: this.height } : {}),\n      }),\n    };\n    return {\n      ...this.config.defaultImgixParams,\n      ...imgixParamsFromImgAttributes,\n      ...this.imgixParams,\n    };\n  }\n\n  private setSrcAndSrcsetAttributes() {\n    const el = this.elementRef.nativeElement;\n    el.setAttribute(this.attributeConfig?.src ?? 'src', this.srcURL);\n    el.setAttribute(this.attributeConfig?.srcset ?? 'srcset', this.srcsetURL);\n  }\n\n  get srcURL(): string {\n    return this.client.buildURL(this.path, this.buildIxParams());\n  }\n  get srcsetURL(): string {\n    return this.client.buildSrcSet(this.path, this.buildIxParams(), {\n      disableVariableQuality: this.disableVariableQuality,\n    });\n  }\n}\n","import { Component, Injectable } from '@angular/core';\n\n@Injectable()\n@Component({\n  selector: '[ixPicture]',\n  template: '<ng-content></ng-content>',\n})\nexport class IxPictureComponent {}\n","import {\n  AfterViewChecked,\n  Component,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n} from '@angular/core';\nimport ImgixClient from 'imgix-core-js';\nimport { createImgixClient } from '../common/createImgixClient';\nimport { coerceBooleanProperty } from '../common/ng';\nimport { ImgixConfig, ImgixConfigService } from './imgix-config.service';\nimport { IImgixParams } from './types';\n\n@Injectable()\n@Component({\n  // the [path] means that path is required\n  selector: '[ixSource][path]',\n  template: ``,\n})\nexport class IxSourceComponent implements AfterViewChecked {\n  private readonly client: ImgixClient;\n\n  @Input('path') path: string;\n  @Input() imgixParams?: IImgixParams;\n  @Input() attributeConfig?: { srcset?: string };\n  @Input()\n  get disableVariableQuality(): boolean {\n    return this._disableVariableQuality;\n  }\n  set disableVariableQuality(_disableVariableQuality: boolean) {\n    this._disableVariableQuality = coerceBooleanProperty(\n      _disableVariableQuality,\n    );\n  }\n  private _disableVariableQuality: boolean = false;\n\n  constructor(\n    @Inject(ImgixConfigService) private config: ImgixConfig,\n    private elementRef: ElementRef,\n  ) {\n    this.client = createImgixClient(config);\n  }\n\n  ngAfterViewChecked() {\n    this.setSrcsetAttribute();\n  }\n  private buildIxParams() {\n    const imgixParamsFromImgAttributes = {};\n    return {\n      ...this.config.defaultImgixParams,\n      ...imgixParamsFromImgAttributes,\n      ...this.imgixParams,\n    };\n  }\n  private setSrcsetAttribute() {\n    const el = this.elementRef.nativeElement;\n    el.setAttribute(this.attributeConfig?.srcset ?? 'srcset', this.srcsetURL);\n  }\n  get srcsetURL(): string {\n    return this.client.buildSrcSet(this.path, this.buildIxParams(), {\n      disableVariableQuality: this.disableVariableQuality,\n    });\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ImgixConfig, ImgixConfigService } from './imgix-config.service';\nimport { IxImgComponent } from './ix-img.component';\nimport { IxPictureComponent } from './ix-picture.component';\nimport { IxSourceComponent } from './ix-source.component';\n\n@NgModule({\n  declarations: [IxImgComponent, IxSourceComponent, IxPictureComponent],\n  exports: [IxImgComponent, IxSourceComponent, IxPictureComponent],\n})\nexport class ImgixAngularModule {\n  // Using config injection pattern from: https://medium.com/@michelestieven/angular-writing-configurable-modules-69e6ea23ea42\n  static forRoot(config: ImgixConfig): ModuleWithProviders<ImgixAngularModule> {\n    return {\n      ngModule: ImgixAngularModule,\n      providers: [\n        IxImgComponent,\n        IxSourceComponent,\n        IxPictureComponent,\n        { provide: ImgixConfigService, useValue: config },\n      ],\n    };\n  }\n}\n","/*\n * Public API Surface of imgix-angular\n */\n\nexport * from './lib/imgix-angular.module';\nexport * from './lib/ix-img.component';\nexport * from './lib/ix-picture.component';\nexport * from './lib/ix-source.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {ImgixConfig as ɵa,ImgixConfigService as ɵb} from './lib/imgix-config.service';"],"names":["InjectionToken","ImgixClient","Injectable","Component","Inject","ElementRef","Input","NgModule"],"mappings":"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"}